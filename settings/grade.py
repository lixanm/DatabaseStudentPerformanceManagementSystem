# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'grade.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import *
import sys
sys.path.append('../')#为什么，因为grade.py与需要先从当前路径出来，再进入service中
from service import service
class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow,self).__init__()
        self.setupUi(self)
        self.query()
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(497, 371)
        font = QtGui.QFont()
        font.setPointSize(12)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(10, 0, 471, 192))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 210, 101, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(270, 210, 101, 31))
        self.label_2.setObjectName("label_2")
        self.editGradeID = QtWidgets.QLineEdit(self.centralwidget)
        self.editGradeID.setGeometry(QtCore.QRect(100, 210, 131, 31))
        self.editGradeID.setObjectName("editGradeID")
        self.editGradeName = QtWidgets.QLineEdit(self.centralwidget)
        self.editGradeName.setGeometry(QtCore.QRect(350, 210, 131, 31))
        self.editGradeName.setObjectName("editGradeName")
        self.btnAddGrade = QtWidgets.QPushButton(self.centralwidget)
        self.btnAddGrade.setGeometry(QtCore.QRect(20, 260, 75, 31))
        self.btnAddGrade.setObjectName("btnAddGrade")
        self.btnUpdateGrade = QtWidgets.QPushButton(self.centralwidget)
        self.btnUpdateGrade.setGeometry(QtCore.QRect(140, 260, 75, 31))
        self.btnUpdateGrade.setObjectName("btnUpdateGrade")
        self.btnDeleteGrade = QtWidgets.QPushButton(self.centralwidget)
        self.btnDeleteGrade.setGeometry(QtCore.QRect(260, 260, 75, 31))
        self.btnDeleteGrade.setObjectName("btnDeleteGrade")
        self.btnQuitGrade = QtWidgets.QPushButton(self.centralwidget)
        self.btnQuitGrade.setGeometry(QtCore.QRect(370, 260, 75, 31))
        self.btnQuitGrade.setObjectName("btnQuitGrade")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 497, 33))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #为添加按钮关联槽函数
        self.btnAddGrade.clicked.connect(self.add)
        #表格项被单击时调用getItem
        self.tableWidget.itemClicked.connect(self.getItem)
        #为修改按钮关联槽函数
        self.btnUpdateGrade.clicked.connect(self.edit)
        #为删除按钮关联槽函数
        self.btnDeleteGrade.clicked.connect(self.delete)
        #为退出按钮关联槽函数
        self.btnQuitGrade.clicked.connect(self.close)

    #自定义一个槽函数，作用是窗体启动，将数据库中的年级信息读取出来
    def query(self):
        #清空表格的所有行
        self.tableWidget.setRowCount(0)
        #调用公共类中的公共方法，查询
        result=service.query('select * from tb_grade')
        row=len(result)  # 获取数据的行数
        self.tableWidget.setRowCount(row)#设置行数
        self.tableWidget.setColumnCount(2)#设置列数
        #设置表格的标题
        self.tableWidget.setHorizontalHeaderLabels(['年级编号','年级名称'])
        for i in range(row):#遍历行
            for j in range(self.tableWidget.columnCount()):#遍历列
                data=QTableWidgetItem(str(result[i][j]))
                #在i行j列放入数据data
                self.tableWidget.setItem(i,j,data)

    #自定义一个方法
    #到数据库中查询要添加的年级名称是否存在
    #到数据库查找这个名字是否存在
    def getName(self,name):
        result=service.query('select * from tb_grade where gradename=%s',(name,))
        return len(result)#返回查询的个数
    #自定义槽函数,向年级表中添加数据
    def add(self):
        gradeid=self.editGradeID.text()#获取年级的编号
        gradeName=self.editGradeName.text()#获取年级的名称
        if gradeid!='' and gradeName!='':
            if self.getName(gradeName)>0:
                #要添加的年级名称在数据库中存在
                #清空文本框
                self.editGradeName.setText('')
                QMessageBox.information(None,'提示','年级名称已经存在，请重新输入')
            else:
                #执行添加操作
                result = service.exec('insert into tb_grade(gradeid,gradeName) values(%s,%s)',(gradeid,gradeName))
                if result>0:
                    self.query()#添加成功后重新加载窗体
                    QMessageBox.information(None,'提示','信息添加成功',QMessageBox.Ok)
        else:
            QMessageBox.warning(None,'警告','请输入数据后在进行添加操作',QMessageBox.Ok)

    #修改操作
    #获取选中的表格内容
    def getItem(self,item):
        if item.column()==0: #第一列
            self.select=item.text()
            self.editGradeID.setText(self.select)
    #年级的修改
    def edit(self):
        try:
            if self.select!='':
                #年级编号是否有值
                gradeName=self.editGradeName.text()
                if gradeName!='':
                    #到数据库中查询一下，要修改的年级名称是否存在
                    if self.getName(gradeName)>0:
                        #存在
                        QMessageBox.information(None,'提示','要修改的年级名称已经存在',QMessageBox.Ok)
                        pass
                    else:
                        result=service.exec('update tb_grade set gradename=%s where gradeid=%s',(gradeName,self.select))
                        if result>0:
                            #修改成功
                            self.query()
                            QMessageBox.information(None,'提示','修改成功',QMessageBox.Ok)
        except Exception as e:
            print(e)
            QMessageBox.warning(None,'警告','请选择要修改的数据',QMessageBox.Ok)

    #在数据库中grade表有 主外键 关系
    #班级表tb_class中含有gradeid，所以tb_class是外键表
    #学生表tb_student中含有gradeid，所以tb_student是外键表
    #现在再删除tb_grade中的gradeid，删除主表的主键，
    #与之关联的外键表的数据要同时删除
    #在数据库表中添加外键约束是加上 on delete cascade
    #删除操作
    def delete(self):
        try:
            if self.select!='':
                #删除年级表中的数据
                result=service.exec('delete from tb_grade where gradeid=%s',(self.select,))
                if result>0:
                    #删除成功
                    self.query()
                    QMessageBox.information(None,'提示','删除成功',QMessageBox.Ok)
        except Exception as e:
            print(e)
            QMessageBox.warning(None,'警告','请选择要删除的数据',QMessageBox.Ok)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "年级设置"))
        self.label.setText(_translate("MainWindow", "年级编号："))
        self.label_2.setText(_translate("MainWindow", "年级名称："))
        self.btnAddGrade.setText(_translate("MainWindow", "添加"))
        self.btnUpdateGrade.setText(_translate("MainWindow", "修改"))
        self.btnDeleteGrade.setText(_translate("MainWindow", "删除"))
        self.btnQuitGrade.setText(_translate("MainWindow", "退出"))

























