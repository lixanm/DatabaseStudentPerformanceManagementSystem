# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'student.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import *
import sys
sys.path.append('../')#为什么，因为grade.py与需要先从当前路径出来，再进入service中
from service import service
class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow,self).__init__()
        #调用本类中的实例方法，初始化界面
        self.setupUi(self)
        self.bindGrade()#编定年级
        self.query()


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 10, 81, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(190, 10, 81, 31))
        self.label_2.setObjectName("label_2")
        self.btnReFrash = QtWidgets.QPushButton(self.centralwidget)
        self.btnReFrash.setGeometry(QtCore.QRect(370, 10, 81, 31))
        self.btnReFrash.setObjectName("btnReFrash")
        self.btnAdd = QtWidgets.QPushButton(self.centralwidget)
        self.btnAdd.setGeometry(QtCore.QRect(450, 10, 81, 31))
        self.btnAdd.setObjectName("btnAdd")
        self.btnUpdate = QtWidgets.QPushButton(self.centralwidget)
        self.btnUpdate.setGeometry(QtCore.QRect(530, 10, 81, 31))
        self.btnUpdate.setObjectName("btnUpdate")
        self.btnDelete = QtWidgets.QPushButton(self.centralwidget)
        self.btnDelete.setGeometry(QtCore.QRect(610, 10, 81, 31))
        self.btnDelete.setObjectName("btnDelete")
        self.btnQuit = QtWidgets.QPushButton(self.centralwidget)
        self.btnQuit.setGeometry(QtCore.QRect(690, 10, 81, 31))
        self.btnQuit.setObjectName("btnQuit")
        self.cboGrade = QtWidgets.QComboBox(self.centralwidget)
        self.cboGrade.setGeometry(QtCore.QRect(90, 10, 80, 24))
        self.cboGrade.setObjectName("cboGrade")
        self.cboClass = QtWidgets.QComboBox(self.centralwidget)
        self.cboClass.setGeometry(QtCore.QRect(260, 10, 80, 24))
        self.cboClass.setObjectName("cboClass")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(10, 70, 771, 271))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(130, 360, 91, 31))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(310, 360, 81, 31))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(490, 360, 81, 31))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(650, 360, 81, 31))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(130, 420, 81, 31))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(130, 460, 81, 31))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(10, 350, 400, 100))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(10, 410, 400, 100))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.editStuID = QtWidgets.QLineEdit(self.centralwidget)
        self.editStuID.setGeometry(QtCore.QRect(200, 360, 113, 31))
        self.editStuID.setObjectName("editStuID")
        self.editStuName = QtWidgets.QLineEdit(self.centralwidget)
        self.editStuName.setGeometry(QtCore.QRect(380, 360, 113, 31))
        self.editStuName.setObjectName("editStuName")
        self.editStuAge = QtWidgets.QLineEdit(self.centralwidget)
        self.editStuAge.setGeometry(QtCore.QRect(540, 360, 113, 31))
        self.editStuAge.setObjectName("editStuAge")
        self.editPhone = QtWidgets.QLineEdit(self.centralwidget)
        self.editPhone.setGeometry(QtCore.QRect(210, 419, 301, 31))
        self.editPhone.setObjectName("editPhone")
        self.editAddress = QtWidgets.QLineEdit(self.centralwidget)
        self.editAddress.setGeometry(QtCore.QRect(210, 460, 511, 31))
        self.editAddress.setObjectName("editAddress")
        self.cboSex = QtWidgets.QComboBox(self.centralwidget)
        self.cboSex.setGeometry(QtCore.QRect(690, 360, 80, 31))
        self.cboSex.setObjectName("cboSex")
        #  给性别的列表框添加男/女
        self.cboSex.addItem('男')
        self.cboSex.addItem('女')
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 33))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #  年级的下拉组合框选项被改变时关联
        self.cboGrade.currentIndexChanged.connect(self.bindClass)
        #  为刷新按钮关联query（）槽函数
        self.btnReFrash.clicked.connect(self.query)
        #  为添加按钮关联槽函数
        self.btnAdd.clicked.connect(self.add)
        #为表格项的单击添加槽函数
        self.tableWidget.itemClicked.connect(self.getItem)
        #为修改按钮绑定槽函数
        self.btnUpdate.clicked.connect(self.edit)
        #为删除按钮添加槽函数
        self.btnDelete.clicked.connect(self.delete)
        #为退出按钮添加槽函数
        self.btnQuit.clicked.connect(self.close)

    #自定义槽函数
    def bindGrade(self):
        self.cboGrade.addItem('所有')
        #从数据库中查找所有的年级名称
        result=service.query('select gradename from tb_grade')
        for i in result:
            self.cboGrade.addItem(i[0])
    def bindClass(self):
        self.cboClass.clear() # 清空下拉组合框的内容
        self.cboClass.addItem('所有')
        result=service.query('select className from v_classinfo where gradeName=%s',self.cboGrade.currentText())
        for item in result:
            self.cboClass.addItem(item[0])
    #自定义槽函数
    def query(self):
        self.tableWidget.setRowCount(0)#清空表格当中所有行
        gname=self.cboGrade.currentText()#获取当前选择的年级
        cname=self.cboClass.currentText()
        #获取所有学生信息
        if gname=='所有':
            result=service.query('select stuid,stuname,concat(gradename,classname),sex,age,address,phone from v_studentinfo')

        elif gname!='所有' and cname=='所有':
            #查询指定年级的所有班级
            result = service.query(
                'select stuid,stuname,concat(gradename,classname),'
                'sex,age,address,phone from v_studentinfo where gradename=%s',gname)
        elif gname!='所有' and cname!='所有':
            result = service.query(
                'select stuid,stuname,concat(gradename,classname),'
                'sex,age,address,phone from v_studentinfo where gradename=%s and classname=%s', gname,cname)
        #向表格中添加数据
        row=len(result)#获取记录数
        #设置表格行数
        self.tableWidget.setRowCount(row)
        self.tableWidget.setColumnCount(7)#7列
        #设置表格的标题
        self.tableWidget.setHorizontalHeaderLabels(
            ['学生编号','学生姓名','班级','性别','年龄','家庭地址','联系电话']
        )
        for i in range(row):
            for j in range(self.tableWidget.columnCount()):
                data=QTableWidgetItem(str(result[i][j]))
                #在表格第i行第j列存放数据data
                self.tableWidget.setItem(i,j,data)

    #自定义方法
    def getName(self,stuId):
        print(stuId)
        result=service.query('select stuname from tb_student where stuid=%s',stuId)
        return len(result) #长度为0，说明查询的数据不存在
    #添加
    def add(self):
        stuId=self.editStuID.text()#获取学号的值
        stuName=self.editStuName.text()
        sex=self.cboSex.currentText()#当前下拉列表框的值
        age=self.editStuAge.text()#获取年龄
        phone=self.editPhone.text()#手机
        address=self.editAddress.text()#地址

        #判断是否选择了年级
        if self.cboGrade.currentText()!='所有':
            #根据年纪名称查询对应的年级ID
            result=service.query('select gradeid from tb_grade where gradename=%s',self.cboGrade.currentText())
            if len(result)>0:
                gradeId=result[0][0]
                #判断是否选择了班级
                if self.cboClass.currentText()!='所有':
                    #根据班级的名称获取班级的id
                    result=service.query('select classid from tb_class where className=%s',self.cboClass.currentText())
                    if len(result)>0:
                        classId=result[0][0]
                        #判断学号和姓名是否为空
                        if stuId!='' and stuName!='':
                            #判断插入的数据在数据库是否存在
                            if self.getName(stuId)>0:
                                self.editStuID.setText('')#存在就清空
                                QMessageBox.information(None, '提示', '您要添加的学生已存在，请重新输入', QMessageBox.Ok)
                            else:
                                result=service.exec('insert into tb_student(stuid,stuname,classid,gradeid,sex,age,phone,address)'
                                                    ' values (%s,%s,%s,%s,%s,%s,%s,%s)',
                                                    (stuId,stuName,classId,gradeId,sex,age,phone,address))

                                if result>0:
                                    self.query()
                                    QMessageBox.information(None, '提示', '添加成功', QMessageBox.Ok)
                        else:
                            QMessageBox.warning(None, '警告', '学号和姓名不允许为空', QMessageBox.Ok)
                else:#班级是所有
                    QMessageBox.warning(None,'警告','请选择班级',QMessageBox.Ok)
        else:#年级是 所有 的时候
            QMessageBox.warning(None,'警告','请选择年级！！',QMessageBox.Ok)

    #单击表格第一列的项的时候，获取学生的学号
    def getItem(self,item):
        if item.column()==0:  # 表格中第一列是学生的学号
            self.select=item.text()  # 单击的项的值
            self.editStuID.setText(self.select)  # 显示在文本框中
            #  根据学生编号查询学生信息
            result=service.query('select stuname,age,sex,phone,address from tb_student where stuid=%s',self.select)
            #  为单行文本框进行赋值
            self.editStuName.setText(result[0][0])
            self.editStuAge.setText(str(result[0][1]))
            #  self.cboSex.currentText(result[0][2])
            self.cboSex.setCurrentText(result[0][2])
            self.editPhone.setText(result[0][3])
            self.editAddress.setText(result[0][4])

    #修改的方法
    def edit(self):
        try:
            #判断是否选择了待修改的数据
            if self.select!='':
                #获取数据
                age=self.editStuAge.text()
                sex=self.cboSex.currentText()
                phone=self.editPhone.text()
                address=self.editAddress.text()
                stuname=self.editStuName.text()
                #开始执行修改操作
                result=service.exec('update tb_student set stuname=%s,sex=%s,age=%s,phone=%s,address=%s where stuid=%s',
                                     (stuname,sex,age,phone,address,self.select))
                if result>0:
                    self.query()
                    QMessageBox.information(None,'提示','修改成功', QMessageBox.Ok)
        except Exception as e:
            print(e)
            QMessageBox.warning(None,'警告','请先选择要修改的数据',QMessageBox.Ok)

    def delete(self):
        try:
            if self.select!='':
                #学号不为空，执行删除操作
                result=service.exec('delete from tb_student where stuid=%s',self.select)
                if result>0:
                    #删除成功
                    self.query()#重新加载数据
                    QMessageBox.information(None,'提示','信息删除成功', QMessageBox.Ok)
        except Exception as e:
            print(e)
            QMessageBox.warning(None,'警告','请选择要删除的数据',QMessageBox.Ok)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "学生信息管理"))
        self.label.setText(_translate("MainWindow", "所属年级"))
        self.label_2.setText(_translate("MainWindow", "所属班级"))
        self.btnReFrash.setText(_translate("MainWindow", "刷新"))
        self.btnAdd.setText(_translate("MainWindow", "添加"))
        self.btnUpdate.setText(_translate("MainWindow", "修改"))
        self.btnDelete.setText(_translate("MainWindow", "删除"))
        self.btnQuit.setText(_translate("MainWindow", "退出"))
        self.label_3.setText(_translate("MainWindow", "学生编号："))
        self.label_4.setText(_translate("MainWindow", "学生姓名："))
        self.label_5.setText(_translate("MainWindow", "年龄："))
        self.label_6.setText(_translate("MainWindow", "性别："))
        self.label_7.setText(_translate("MainWindow", "联系电话："))
        self.label_8.setText(_translate("MainWindow", "家庭住址："))
        self.label_9.setText(_translate("MainWindow", "信  息"))
        self.label_10.setText(_translate("MainWindow", "设  置"))





























