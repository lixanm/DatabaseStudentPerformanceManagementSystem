# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'result.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *

import sys
sys.path.append('../')#为什么，因为grade.py与需要先从当前路径出来，再进入service中
from service import service

class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow,self).__init__()
        #调用本类中的实例方法
        self.setupUi(self)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 494)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 10, 111, 41))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(180, 10, 111, 41))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(350, 10, 111, 41))
        self.label_3.setObjectName("label_3")
        self.cboExamKind = QtWidgets.QComboBox(self.centralwidget)
        self.cboExamKind.setGeometry(QtCore.QRect(100, 13, 80, 31))
        self.cboExamKind.setObjectName("cboExamKind")
        self.cboGrade = QtWidgets.QComboBox(self.centralwidget)
        self.cboGrade.setGeometry(QtCore.QRect(260, 13, 80, 31))
        self.cboGrade.setObjectName("cboGrade")
        self.cboClass = QtWidgets.QComboBox(self.centralwidget)
        self.cboClass.setGeometry(QtCore.QRect(430, 13, 80, 31))
        self.cboClass.setObjectName("cboClass")
        self.btnRefrash = QtWidgets.QPushButton(self.centralwidget)
        self.btnRefrash.setGeometry(QtCore.QRect(540, 13, 51, 31))
        self.btnRefrash.setObjectName("btnRefrash")
        self.btnAdd = QtWidgets.QPushButton(self.centralwidget)
        self.btnAdd.setGeometry(QtCore.QRect(590, 13, 51, 31))
        self.btnAdd.setObjectName("btnAdd")
        self.btnUpdate = QtWidgets.QPushButton(self.centralwidget)
        self.btnUpdate.setGeometry(QtCore.QRect(640, 13, 51, 31))
        self.btnUpdate.setObjectName("btnUpdate")
        self.btnDelete = QtWidgets.QPushButton(self.centralwidget)
        self.btnDelete.setGeometry(QtCore.QRect(690, 13, 51, 31))
        self.btnDelete.setObjectName("btnDelete")
        self.btnQuit = QtWidgets.QPushButton(self.centralwidget)
        self.btnQuit.setGeometry(QtCore.QRect(740, 13, 51, 31))
        self.btnQuit.setObjectName("btnQuit")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(20, 50, 761, 311))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(270, 370, 111, 41))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(440, 370, 111, 41))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(610, 370, 111, 41))
        self.label_6.setObjectName("label_6")
        self.cboStuName = QtWidgets.QComboBox(self.centralwidget)
        self.cboStuName.setGeometry(QtCore.QRect(350, 380, 80, 31))
        self.cboStuName.setObjectName("cboStuName")
        self.cboSubject = QtWidgets.QComboBox(self.centralwidget)
        self.cboSubject.setGeometry(QtCore.QRect(520, 380, 80, 31))
        self.cboSubject.setObjectName("cboSubject")
        self.editResult = QtWidgets.QLineEdit(self.centralwidget)
        self.editResult.setGeometry(QtCore.QRect(660, 380, 113, 31))
        self.editResult.setObjectName("editResult")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 33))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #调用bindCbo()方法
        self.bindCbo()
        #调用bindGrade（）方法
        self.bindGrade()
        #调用bindClass
        self.bindClass() #窗体运行时，初始化班级为所有
        #关联槽函数  ，  当年级选项改变时，班级根据年级改变查询
        self.cboGrade.currentIndexChanged.connect(self.bindClass)
        #窗体加载时，查询所有
        self.query()
        self.btnRefrash.clicked.connect(self.query)
        self.cboClass.currentIndexChanged.connect(self.bindStuName)
        self.btnAdd.clicked.connect(self.add)
        self.tableWidget.itemClicked.connect(self.getItem)
        self.btnUpdate.clicked.connect(self.edit)
        self.btnDelete.clicked.connect(self.delete)
        self.btnQuit.clicked.connect(self.close)

    #删除
    def delete(self):
        try:
            if self.select!='':
                result=service.exec('delete from tb_result where id=%s',self.select)
                if result>0:
                    self.query()
                    QMessageBox.information(None, '提示', '删除成功', QMessageBox.Ok)
        except Exception as e:
            print(e)
            QMessageBox.warning(None,'警告','请选择要删除的数据',QMessageBox.Ok)
    #修改
    #判断一下是否选择了学号
    def getItem(self,item):
        if item.column() == 0:
            self.select=item.text()#要删除或修改的编号
            print(self.select)
    def edit(self):
        try:
            if self.select != "":
                id=self.select#记录要修改的数据的id
                score=self.editResult.text()#记录成绩
                result=service.exec('update tb_result set result=%s where id=%s',(score,id))
                if result>0:
                    self.query()
                    QMessageBox.information(None,'提示','信息修改成功',QMessageBox.Ok)
        except Exception as e:
            print(e)
            QMessageBox.warning(None,'警告','请先选择要修改的数据',QMessageBox.Ok)
    #添加数据之前，需要判断要添加的数据是否存在
    def getScore(self,stuid,kindid,subid):
        result=service.query('select * from tb_result where stuid=%s and kindid=%s and subid=%s',stuid,kindid,subid)
        return len(result)
    #定义槽函数 add
    def add(self):
        subname = self.cboSubject.currentText()#获取科目的名称
        kindname = self.cboExamKind.currentText()#考试类别
        gradename = self.cboGrade.currentText()
        classname = self.cboClass.currentText()
        stuname = self.cboStuName.currentText()#获取当前的学生姓名
        score = self.editResult.text()#获取成绩
        #判断考试类别是否选择
        if kindname!='所有':
            #根据名称获取考试类别的id
            result=service.query('select kindID from tb_examkinds where kindName=%s',kindname)
            if len(result)>0:
                kindid=result[0][0]#存储了考试的种类id
                #判断考试科目是否选择
                if subname!='所有':
                    #根据科目名称查询科目的id
                    result=service.query('select subid from tb_subject where subName=%s',subname)
                    if len(result)>0:
                        subid=result[0][0]#存储科目编号
                        #判断学生姓名是否为空
                        if stuname!='所有':
                            #选择班级和年级
                            if gradename!='所有' and classname!='所有':
                                result=service.query('select stuid from v_studentinfo where gradeName=%s and className=%s and stuName=%s',gradename,classname,stuname)
                                if len(result)>0:
                                    stuid=result[0][0]
                                    #kindid=result[0][1]
                                    #subid=result[0][2]
                                    if self.getScore(stuid,kindname,subid)<=0:
                                        #数据不是已存在要判断是否有成绩
                                        if score!='':
                                            #执行插入语句
                                            result=service.exec('INSERT into tb_result(stuid,kindid,subid,result) values (%s,%s,%s,%s)',(stuid,kindid,subid,score))
                                            if result>0:
                                                print('----------------------------')
                                                self.query()
                                                QMessageBox.information(None, '提示', '信息插入成功', QMessageBox.Ok)
                                        else:
                                            QMessageBox.warning(None, '警告', '请输入成绩', QMessageBox.Ok)
                                    else:
                                        QMessageBox.warning(None, '警告', '该数据已存在', QMessageBox.Ok)
                            else:
                                QMessageBox.warning(None, '警告', '请选择年级和班级', QMessageBox.Ok)
                        else:
                            QMessageBox.warning(None,'警告','请选择学生',QMessageBox.Ok)
                else:
                    QMessageBox.warning(None,'警告','请选择科目',QMessageBox.Ok)
        else:
            QMessageBox.warning(None,'警告','请选择考试类别',QMessageBox.Ok)
    #定义方法，作用，当班级修改之后，学生姓名对应更改
    def bindStuName(self):
        self.cboStuName.clear()
        result=service.query('select stuname from v_studentinfo where gradeName=%s and className=%s',self.cboGrade.currentText(),self.cboClass.currentText())
        for i in result:
            self.cboStuName.addItem(i[0])
    #定义槽函数
    #定义方法，作用是将考试科目，学生姓名，年级
    def bindCbo(self):
        #考试类别
        self.cboExamKind.addItem('所有')
        result=service.query('select kindName from tb_examkinds')
        #result 二维元组
        for i in result:
            self.cboExamKind.addItem(i[0])
        #考试的科目
        self.cboSubject.addItem("所有")
        result = service.query('select subname from tb_subject')
        for i in result:
            self.cboSubject.addItem(i[0])

        #学生姓名
        result=service.query('select stuname from tb_student')
        for i in result:
            self.cboStuName.addItem(i[0])
    #定义方法，作用是绑定所有的年级
    def bindGrade(self):
        self.cboGrade.addItem('所有')
        result=service.query('select gradename from tb_grade')
        for i in result:
            self.cboGrade.addItem(i[0])
    #定义方法，作用是绑定班级
    def bindClass(self):
        self.cboClass.clear()#清空下拉列表
        self.cboClass.addItem('所有')
        #  根据年级名称查询对应的班级名称
        result=service.query('select classname from v_classinfo where gradename=%s',self.cboGrade.currentText())
        #  将年级所对应的班级添加到下拉列表中
        for item in result:
            self.cboClass.addItem(item[0])
    # 查询
    def query(self):
        self.tableWidget.setRowCount(0)#清空表格中的所有行
        kinkdName=self.cboExamKind.currentText()#获取考试种类名称
        gradeName=self.cboGrade.currentText()
        className=self.cboClass.currentText()
        #当窗体加载时，考试类别，年级，班级初始值都是所有
        if kinkdName=='所有':
            if gradeName=='所有':
                if className=='所有':
                    #查询全部的学生信息
                    result=service.query('SELECT id,stuid,stuname,CONCAT(gradeName,\'/\',className),kindName,subName,result from v_resultinfo')

                else:#班级不是所有
                    result = service.query(
                        'SELECT id,stuid,stuname,CONCAT(gradeName,\'/\',className),kindName,subName,result from v_resultinfo where className=%s',className)

            else:#年级不是所有
                if className=='所有':
                    result = service.query(
                        'SELECT id,stuid,stuname,CONCAT(gradeName,\'/\',className),kindName,subName,result from v_resultinfo where gradename=%s',gradeName)
                else:#根据指定年级和指定班级查询
                    result = service.query(
                        'SELECT id,stuid,stuname,CONCAT(gradeName,\'/\',className),kindName,subName,result from v_resultinfo where gradename=%s and className=%s',gradeName,className)

        else:#考试类别不是所有
            if gradeName=='所有':
                if className=='所有':
                    result = service.query(
                        'SELECT id,stuid,stuname,CONCAT(gradeName,\'/\',className),kindName,subName,result from v_resultinfo where kindName=%s',kinkdName)
            else:
                if className=='所有':
                    result = service.query(
                        'SELECT id,stuid,stuname,CONCAT(gradeName,\'/\',className),kindName,subName,result from v_resultinfo where kindName=%s and gradeName=%s',kinkdName,gradeName)
                else:
                    result = service.query(
                        'SELECT id,stuid,stuname,CONCAT(gradeName,\'/\',className),kindName,subName,result from v_resultinfo where kindName=%s and gradename=%s and className=%s',kinkdName,gradeName,className)

        #获取查询到的记录的行数
        row=len(result)
        self.tableWidget.setRowCount(row)
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setHorizontalHeaderLabels(
            ['编号','学生编号','学生姓名','班级','考试种类','科目名称','分数']
        )
        for i in range(row):
            for j in range(7):
                data=QTableWidgetItem(str(result[i][j]))
                self.tableWidget.setItem(i,j,data)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "学生成绩管理"))
        self.label.setText(_translate("MainWindow", "考试种类："))
        self.label_2.setText(_translate("MainWindow", "选择年级："))
        self.label_3.setText(_translate("MainWindow", "选择班级："))
        self.btnRefrash.setText(_translate("MainWindow", "刷新"))
        self.btnAdd.setText(_translate("MainWindow", "添加"))
        self.btnUpdate.setText(_translate("MainWindow", "修改"))
        self.btnDelete.setText(_translate("MainWindow", "删除"))
        self.btnQuit.setText(_translate("MainWindow", "退出"))
        self.label_4.setText(_translate("MainWindow", "学生姓名："))
        self.label_5.setText(_translate("MainWindow", "考试科目："))
        self.label_6.setText(_translate("MainWindow", "成绩："))































